class CfgSkeletons
{
	class Default
    {
        isDiscrete = true;
        skeletonInherit = "";
        skeletonBones[] = {};
    };
	class Plane_Fighter_05_F_skeleton: Default
	{
		isDiscrete = false;
        skeletonInherit = Default;
		skeletonBones[] =
		{
			// damage
			damageHide,"",

			// cockpit
			altB_1,"",
			altR_1,"",
			mph_1,"",
			vario_1,"",
			flapx,"",
			gearx,"",
			rpm_1,"",
			rpm_2,"",
			fuel_1,"",
			fuel_2,"",
			kompas_4,"",
			canopy_elevator,"",
			display,"",
			Display_off_dmg,"",
			horizont_3,"",
			ejection_seat,"",
			stick_pilot,"",
			stick_throttle,"",

			// flaps
			flap_fl,"",
			flap_fr,"",
			flap_bl,"",
			flap_br,"",
			elevator_l,"",
			elevator_r,"",
			rudder_l,"",
			rudder_r,"",

			// front gear
			gear_1_1,"",
			gear_1_1_steering,gear_1_1,
			gear_1_1_damper,gear_1_1_steering,
			wheel_1_1,gear_1_1_damper,

			// left gear
			gear_2_1,"",
			gear_2_1_stabil2,gear_2_1,
			gear_2_1_rot,gear_2_1,
			gear_2_1_damper,gear_2_1_rot,
			gear_2_1_stabil,gear_2_1_damper,
			wheel_2_1,gear_2_1_damper,

			// right gear
			gear_2_2,"",
			gear_2_2_stabil2,gear_2_2,
			gear_2_2_rot,gear_2_2,
			gear_2_2_damper,gear_2_2_rot,
			gear_2_2_stabil,gear_2_2_damper,
			wheel_2_2,gear_2_2_damper,

			// gear hatches
			hatch_1_1_f,"",
			hatch_1_1_b,"",
			hatch_1_1_ml,"",
			hatch_1_1_mr,"",
			hatch_1_1_bl,"",
			hatch_1_1_br,"",
			hatch_2_1,"",
			hatch_2_2,"",
			hatch_3_1,"",
			hatch_3_2,"",

			// engine
			hatch_eng_b_1_1,"",
			hatch_eng_b_1_2,"",
			hatch_eng_t_1_1,"",
			hatch_eng_t_1_3,hatch_eng_t_1_1,
			hatch_eng_t_1_2,"",
			hatch_eng_t_1_4,hatch_eng_t_1_2,
			hatch_eng_t_2_1,"",
			hatch_eng_t_2_2,"",
			hatch_eng_b_2_1,"",
			hatch_eng_b_2_2,"",
			hatch_eng_b_3_1,"",
			hatch_eng_b_3_2,"",
			engine_1,"",
			engine_2,engine_1,
			engine_3,engine_2,
			airscrew,"",

			// weaponbays
			hatch_weaponbay_1_1,"",
			hatch_weaponbay_1_2,"",
			hatch_weaponbay_1_3,"",
			hatch_weaponbay_1_4,"",

			// pylons
			pylonhide,"",
			pylon_1,pylonhide,
			pylon_2,pylonhide,
			pylon_3,pylonhide,
			pylon_4,pylonhide,
			pylon_5,pylonhide,
			pylon_6,pylonhide,

			// engine nozzle
			engine_nozzle_1,engine_3,
			engine_nozzle_2,engine_3,
			engine_nozzle_3,engine_3,
			engine_nozzle_4,engine_3,
			engine_nozzle_5,engine_3,
			engine_nozzle_6,engine_3,
			engine_nozzle_7,engine_3,
			engine_nozzle_8,engine_3,
			engine_nozzle_9,engine_3,
			engine_nozzle_10,engine_3,
			engine_nozzle_11,engine_3,
			engine_nozzle_12,engine_3,
			engine_nozzle_13,engine_3,
			engine_nozzle_14,engine_3,
			engine_nozzle_15,engine_3,
			engine_nozzle_16,engine_3,
			engine_nozzle_17,engine_3,
			engine_nozzle_18,engine_3,
			engine_nozzle_19,engine_3,
			engine_nozzle_20,engine_3,
			engine_nozzle_21,engine_3,
			engine_nozzle_22,engine_3,
			engine_nozzle_23,engine_3,
			engine_nozzle_24,engine_3,

			// fire
			Fire,""
		};
	};
	class Plane_Fighter_05_Ejection_Seat_F_skeleton: Default
	{
        skeletonInherit = Default;
		skeletonBones[] =
		{
			// cockpit
			ejection_seat,"",

			// fire
			rocket_flash,""
		};
	};
};
class CfgModels
{
	class Default
    {
        sectionsInherit = "";
        sections[] = {};
        skeletonName = "";
    };
	class Plane_Fighter_05_F: Default
	{
        sectionsInherit = Default;
		sections[] =
		{
			zbytek,
			camo1,
			camo2,
			autobacklit,
			glass1,
			glass2,
			clan,
			zasleh,
			Hit_Avionics,
			Hit_Engine,
			Hit_Hull,
			Hit_RudderL,
			Hit_RudderR,
			Hit_ElevatorL,
			Hit_ElevatorR,
			Hit_AileronL,
			Hit_AileronR
		};
		skeletonName = Plane_Fighter_05_F_skeleton;
		class Animations
		{
			// damage animations
			class damageHide
			{
				type = hide;
				source = damage;
				selection = damageHide;
			};

			// cockpit animations
			class IndicatorRPM1
			{
				type = rotation;
				source = rpm;
				selection = rpm_1;
				axis = rpm_1_axis;
				memory = true;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 180);
			};
			class IndicatorRPM2: IndicatorRPM1
			{
				selection = rpm_2;
				axis = rpm_2_axis;
				angle1 = (rad 180);
			};
			class HorizontBank
			{
				type = rotationZ;
				source = horizonBank;
				selection = horizont_3;
				axis = HorizontBank_axis;
				memory = false;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad -360);
				angle1 = (rad 360);
			};
			class HorizontDive
			{
				type = rotationX;
				source = horizonDive;
				selection = horizont_3;
				axis = horizont_3_axis;
				memory = false;
				minValue = (rad -90);
				maxValue = (rad 90);
				angle0 = (rad -90);
				angle1 = (rad 90);
			};
			class IndicatorFuel1
			{
				type = rotation;
				source = fuel;
				selection = fuel_1;
				axis = fuel_1_axis;
				memory = false;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = 3.665;
			};
			class IndicatorFuel2: IndicatorFuel1
			{
				selection = fuel_2;
				axis = fuel_2_axis;
			};
			class DisplayOn
			{
				type = hide;
				source = rpm;
				selection = display;
				sourceAddress = mirror;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.1;
			};
			class Avionics_damage
			{
				type = hide;
				source = HitAvionics;
				selection = Display_off_dmg;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.9;
			};
			class IndicatorFlaps
			{
				type = hide;
				source = flap;
				selection = flapx;
				memory = true;
				minValue = 0;
				maxValue = 0.5;
				hideValue = 0;
				unHideValue = 0.5;
			};
			class IndicatorGear
			{
				type = hide;
				source = gear;
				sourceAddress = mirror;
				selection = gearx;
				memory = true;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.19;
			};
			class IndicatorVertSpeed1
			{
				type = rotation;
				source = vertSpeed;
				selection = vario_1;
				axis = vario_1_axis;
				minValue = -60;
				maxValue = 60;
				angle0 = 2.268928;
				angle1 = -2.268928;
			};
			class IndicatorSpeed1
			{
				type = rotation;
				source = speed;
				selection = mph_1;
				axis = mph_1_axis;
				minValue = 0;
				maxValue = 210;
				angle0 = 0;
				angle1 = (rad 180);
			};
			class IndicatorAltRadar1
			{
				type = rotation;
				source = altRadar;
				selection = altr_1;
				axis = altr_1_axis;
				memory = false;
				minValue = 0;
				maxValue = 10000;
				angle0 = 0;
				angle1 = (rad 180);
			};
			class IndicatorAltBaro1
			{
				type = rotation;
				source = altBaro;
				selection = altb_1;
				axis = altb_1_axis;
				memory = false;
				minValue = 0;
				maxValue = 10000;
				angle0 = 0;
				angle1 = (rad 180);
			};
			class kompas_4
			{
				type = rotation;
				source = direction;
				selection = kompas_4;
				axis = kompas_4_axis;
				memory = false;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = 0;
				angle1 = (rad -360);
			};
			class Stick_Pilot_Bank
			{
				type = rotation;
				axis = stick_pilot_bank_axis;
				source = aileron;
				selection = stick_pilot;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad 44);
				angle1 = (rad -44);
			};
			class Stick_Pilot_Dive
			{
				type = rotation;
				axis = stick_pilot_dive_axis;
				source = elevator;
				selection = stick_pilot;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad 44);
				angle1 = (rad -44);
			};
			class canopy_elevator
			{
				type = rotation;
				source = cabin;
				selection = canopy_elevator;
				axis = canopy_elevator_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 8;
				angle0 = 1.32645;
				angle1 = 0;
			};

			// flaps animations
			class FlapFL
			{
				type = rotation;
				source = flap;
				selection = flap_fl;
				axis = flap_fl_axis;
				minValue = 0.5;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 28.6);
			};
			class FlapFR: FlapFL
			{
				selection = flap_fr;
				axis = flap_fr_axis;
				angle1 = (rad -28.6);
			};
			class FlapBL
			{
				type = rotation;
				source = flap;
				selection = flap_bl;
				axis = flap_bl_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -28.6);
			};
			class FlapBR: FlapBL
			{
				selection = flap_br;
				axis = flap_br_axis;
				angle1 = (rad 28.6);
			};
			class ElevatorL
			{
				type = rotation;
				source = elevatorLeftCenterDamaged;
				selection = elevator_l;
				axis = elevator_l_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 28.6);
				angle1 = (rad -28.6);
			};
			class ElevatorR: ElevatorL
			{
				source = elevatorRightDamaged;
				selection = elevator_r;
				axis = elevator_r_axis;
				angle0 = (rad -28.6);
				angle1 = (rad 28.6);
			};
			class AileronFL
			{
				type = rotation;
				source = aileronLeftDamaged;
				selection = flap_bl;
				axis = flap_bl_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -10);
				angle1 = (rad 10);
			};
			class AileronFR: AileronFL
			{
				source = aileronRightDamaged;
				selection = flap_br;
				axis = flap_br_axis;
			};
			class AileronBL: AileronFL
			{
				source = aileronLeftDamaged;
				selection = elevator_l;
				axis = elevator_l_axis;
			};
			class AileronBR: AileronFL
			{
				source = aileronRightDamaged;
				selection = elevator_r;
				axis = elevator_r_axis;
			};
			class RudderL
			{
				type = rotation;
				source = rudderLeftCenterDamaged;
				selection = rudder_l;
				axis = rudder_l_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -30);
				angle1 = (rad 30);
				memory = true;
			};
			class RudderR: RudderL
			{
				source = rudderRightDamaged;
				selection = rudder_r;
				axis = rudder_r_axis;
			};

			// gear animations
			class FrontGear
			{
				type = rotation;
				source = gear;
				selection = gear_1_1;
				axis = gear_1_1_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 0.8;
				angle0 = 0;
		 		angle1 = (rad -92);
			};
			class FrontGearSteering
			{
				type = rotation;
				source = noseWheelTurn;
				selection = gear_1_1_steering;
				axis = gear_1_1_steering_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -35);
				angle1 = (rad 35);
			};
			/* TODO begin */
			class FrontGearDamper
			{
				type = translation;
				source = Damper_1_1_source;
				selection = gear_1_1_damper;
				axis = gear_1_1_damper_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = -1;
			};
			/* TODO end */
			class Wheel_1_1
			{
				type = rotation;
				source = wheel_1_1_source;
				selection = wheel_1_1;
				axis = wheel_1_1_axis;
				memory = true;
				sourceAddress = loop;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -360);
			};
			class Gear_2_1_Main
			{
				type = rotation;
				source = gear;
				selection = Gear_2_1;
				axis = Gear_2_1_axis;
				minValue = 0;
				maxValue = 0.9;
				angle0 = 0;
				angle1 = (rad -84.3);
			};
			class Gear_2_1_Stabil2
			{
				type = rotation;
				source = gear;
				selection = Gear_2_1_stabil2;
				axis = gear_2_1_stabil2_axis;
				minValue = 0;
				maxValue = 0.9;
				angle0 = 0;
				angle1 = (rad -45);
			};
			class Gear_2_1_Rot
			{
				type = rotation;
				source = gear;
				selection = Gear_2_1_rot;
				axis = Gear_2_1_rot_axis;
				minValue = 0.7;
				maxValue = 0.9;
				angle0 = 0;
				angle1 = (rad -90);
			};
			/* TODO begin */
			class Gear_2_1_Move
			{
				type = translation;
				source = gear;
				selection = gear_2_1_damper;
				axis = gear_2_1_rot_axis;
				minValue = 0.7;
				maxValue = 0.9;
				offset0 = 0;
				offset1 = -0.2;
			};
			class Gear_2_1_Damper: FrontGearDamper
			{
				source = Damper_2_1_source;
				selection = gear_2_1_damper;
				axis = gear_2_1_damper_axis;
				offset0 = 0;
				offset1 = -0.5;
			};
			class Gear_2_1_stabil
			{
				type = rotation;
				source = Damper_2_1_source;
				selection = gear_2_1_stabil;
				axis = gear_2_1_stabil_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 35);
				angle1 = 0;
			};
			/* TODO end */
			class Wheel_2_1: Wheel_1_1
			{
				source = wheel_2_1_source;
				selection = wheel_2_1;
				axis = wheel_2_1_axis;
			};
			class Gear_2_2_Main: Gear_2_1_Main
			{
				selection = Gear_2_2;
				axis = Gear_2_2_axis;
			};
			class Gear_2_2_Stabil2: Gear_2_1_Stabil2
			{
				selection = Gear_2_2_stabil2;
				axis = Gear_2_2_stabil2_axis;
			};
			class Gear_2_2_Rot: Gear_2_1_Rot
			{
				selection = Gear_2_2_rot;
				axis = Gear_2_2_rot_axis;
				angle1 = (rad 90);
			};
			/* TODO begin */
			class Gear_2_2_Move: Gear_2_1_Move
			{
				selection = gear_2_2_damper;
				axis = gear_2_2_rot_axis;
			};
			class Gear_2_2_Damper: FrontGearDamper
			{
				source = Damper_2_2_source;
				selection = gear_2_2_damper;
				axis = gear_2_2_damper_axis;
				offset0 = 0;
				offset1 = -0.5;
			};
			class Gear_2_2_stabil: Gear_2_1_stabil
			{
				source = Damper_2_2_source;
				selection = gear_2_2_stabil;
				axis = gear_2_2_stabil_axis;
			};
			/* TODO end */
			class Wheel_2_2: Wheel_2_1
			{
				source = wheel_2_2_source;
				selection = wheel_2_2;
				axis = wheel_2_2_axis;
			};

			// gear hatches animations
			class Hatch_1_1_f: FrontGear
			{
				selection = hatch_1_1_f;
				axis = hatch_1_1_f_axis;
				minValue = 0.75;
				maxValue = 0.8;
				angle0 = 0;
				angle1 = (rad 90);
			};
			class Hatch_1_1_b: Hatch_1_1_f
			{
				selection = hatch_1_1_b;
				axis = hatch_1_1_b_axis;
				minValue = 0;
				maxValue = 0.8;
				angle0 = 0;
				angle1 = (rad -90);
			};
			class Hatch_2_1
			{
				type = rotation;
				source = gear;
				selection = Hatch_2_1;
				axis = Hatch_2_1_axis;
				minValue = 0;
				maxValue = 0.45;
				angle0 = 0;
				angle1 = (rad -40);
			};
			class Hatch_2_1_Close: Hatch_2_1
			{
				minValue = 0.9;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 40);
			};
			class Hatch_2_2: Hatch_2_1
			{
				selection = Hatch_2_2;
				axis = Hatch_2_2_axis;
				angle1 = (rad 40);
			};
			class Hatch_2_2_Close: Hatch_2_2
			{
				minValue = 0.9;
				maxValue = 1;
				angle1 = (rad -40);
			};
			class Hatch_3_1
			{
				type = rotation;
				source = gear;
				selection = Hatch_3_1;
				axis = Hatch_3_1_axis;
				minValue = 0.9;
				angle0 = (rad 30);
				angle1 = (rad 90);
			};
			class Hatch_3_2: Hatch_3_1
			{
				selection = Hatch_3_2;
				axis = Hatch_3_2_axis;
				angle0 = (rad -30);
				angle1 = (rad -90);
			};

			// engine animations
			class Hatch_Eng_b_1_1
			{
				type = rotation;
				source = thrustVector;
				selection = Hatch_Eng_b_1_1;
				axis = Hatch_Eng_b_1_1_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 90);
			};
			class Hatch_Eng_b_1_2: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_b_1_2;
				axis = Hatch_Eng_b_1_2_axis;
				angle1 = (rad -90);
			};
			class Hatch_Eng_t_1_1: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_t_1_1;
				axis = Hatch_Eng_t_1_1_axis;
				angle1 = (rad -120);
			};
			class Hatch_Eng_t_1_2: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_t_1_2;
				axis = Hatch_Eng_t_1_2_axis;
				angle1 = (rad 120);
			};
			class Hatch_Eng_t_1_3: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_t_1_3;
				axis = Hatch_Eng_t_1_3_axis;
				angle1 = (rad -145);
			};
			class Hatch_Eng_t_1_4: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_t_1_4;
				axis = Hatch_Eng_t_1_4_axis;
				angle1 = (rad 145);
			};
			class Hatch_Eng_t_2_1: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_t_2_1;
				axis = Hatch_Eng_t_2_1_axis;
				angle1 = (rad -100);
			};
			class Hatch_Eng_t_2_2: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_t_2_2;
				axis = Hatch_Eng_t_2_2_axis;
				angle1 = (rad 100);
			};
			class Hatch_Eng_b_3_1: Hatch_Eng_b_1_1
			{
				selection = Hatch_Eng_b_3_1;
				axis = Hatch_Eng_b_3_1_axis;
				maxValue = 0.5;
				angle1 = (rad 90);
			};
			class Hatch_Eng_b_3_2: Hatch_Eng_b_3_1
			{
				selection = Hatch_Eng_b_3_2;
				axis = Hatch_Eng_b_3_2_axis;
				angle1 = (rad -90);
			};
			class Hatch_Eng_b_2_1: Hatch_Eng_b_1_1
			{
				source = speedbrake;
				minValue = 0;
				maxValue = 1;
				selection = Hatch_Eng_b_2_1;
				axis = Hatch_Eng_b_2_1_axis;
				angle1 = (rad 90);
			};
			class Hatch_Eng_b_2_2: Hatch_Eng_b_2_1
			{
				selection = Hatch_Eng_b_2_2;
				axis = Hatch_Eng_b_2_2_axis;
				angle1 = (rad -90);
			};
			class Engine_1: Hatch_Eng_b_1_1
			{
				selection = Engine_1;
				axis = Engine_1_axis;
				minValue = 0;
				maxValue = 1;
				angle1 = (rad 90);
			};
			class Engine_2: Engine_1
			{
				selection = Engine_2;
				axis = Engine_2_axis;
				angle1 = (rad -180);
			};
			class Engine_3: Engine_1
			{
				selection = Engine_3;
				axis = Engine_3_axis;
				angle1 = (rad 180);
			};
			class Airscrew
			{
				type = rotation;
				source = rotor;
				selection = airscrew;
				axis = airscrew_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 360);
			};

			// weaponbays animations
			class Hatch_Weaponbay_1_1
			{
				type = rotation;
				source = bay.1;
				sourceAddress = clamp;
				selection = Hatch_Weaponbay_1_1;
				axis = Hatch_Weaponbay_1_1_axis;
				animPeriod = 0;
				minValue = 0;
				maxValue = 0.5;
				angle0 = 0;
				angle1 = (rad -90);
			};
			class Hatch_Weaponbay_1_2: Hatch_Weaponbay_1_1
			{
				source = bay.2;
				selection = Hatch_Weaponbay_1_2;
				axis = Hatch_Weaponbay_1_2_axis;
				angle1 = (rad 90);
			};
			class Hatch_Weaponbay_1_3: Hatch_Weaponbay_1_1
			{
				selection = Hatch_Weaponbay_1_3;
				axis = Hatch_Weaponbay_1_3_axis;
				angle1 = (rad 90);
			};
			class Hatch_Weaponbay_1_4: Hatch_Weaponbay_1_1
			{
				source = bay.2;
				selection = Hatch_Weaponbay_1_4;
				axis = Hatch_Weaponbay_1_4_axis;
			};

			// engine nozzle animations
			class engine_nozzle_1
			{
				type = translation;
				source = throttle;
				selection = engine_nozzle_1;
				begin = engine_nozzle_1_start;
				end = engine_nozzle_1_end;
				minValue = 0;
				maxValue = 1;
				offset0 = 1;
				offset1 = -1;
			};
			class engine_nozzle_2: engine_nozzle_1
			{
				selection = engine_nozzle_2;
				begin = engine_nozzle_2_start;
				end = engine_nozzle_2_end;
			};
			class engine_nozzle_3: engine_nozzle_2
			{
				selection = engine_nozzle_3;
				begin = engine_nozzle_3_start;
				end = engine_nozzle_3_end;
			};
			class engine_nozzle_4: engine_nozzle_3
			{
				selection = engine_nozzle_4;
				begin = engine_nozzle_4_start;
				end = engine_nozzle_4_end;
			};
			class engine_nozzle_5: engine_nozzle_4
			{
				selection = engine_nozzle_5;
				begin = engine_nozzle_5_start;
				end = engine_nozzle_5_end;
			};
			class engine_nozzle_6: engine_nozzle_5
			{
				selection = engine_nozzle_6;
				begin = engine_nozzle_6_start;
				end = engine_nozzle_6_end;
			};
			class engine_nozzle_7: engine_nozzle_6
			{
				selection = engine_nozzle_7;
				begin = engine_nozzle_7_start;
				end = engine_nozzle_7_end;
			};
			class engine_nozzle_8: engine_nozzle_7
			{
				selection = engine_nozzle_8;
				begin = engine_nozzle_8_start;
				end = engine_nozzle_8_end;
			};
			class engine_nozzle_9: engine_nozzle_8
			{
				selection = engine_nozzle_9;
				begin = engine_nozzle_9_start;
				end = engine_nozzle_9_end;
			};
			class engine_nozzle_10: engine_nozzle_9
			{
				selection = engine_nozzle_10;
				begin = engine_nozzle_10_start;
				end = engine_nozzle_10_end;
			};
			class engine_nozzle_11: engine_nozzle_10
			{
				selection = engine_nozzle_11;
				begin = engine_nozzle_11_start;
				end = engine_nozzle_11_end;
			};
			class engine_nozzle_12: engine_nozzle_11
			{
				selection = engine_nozzle_12;
				begin = engine_nozzle_12_start;
				end = engine_nozzle_12_end;
			};
			class engine_nozzle_13: engine_nozzle_12
			{
				selection = engine_nozzle_13;
				begin = engine_nozzle_13_start;
				end = engine_nozzle_13_end;
			};
			class engine_nozzle_14: engine_nozzle_13
			{
				selection = engine_nozzle_14;
				begin = engine_nozzle_14_start;
				end = engine_nozzle_14_end;
			};
			class engine_nozzle_15: engine_nozzle_14
			{
				selection = engine_nozzle_15;
				begin = engine_nozzle_15_start;
				end = engine_nozzle_15_end;
			};
			class engine_nozzle_16: engine_nozzle_15
			{
				selection = engine_nozzle_16;
				begin = engine_nozzle_16_start;
				end = engine_nozzle_16_end;
			};
			class engine_nozzle_17: engine_nozzle_16
			{
				selection = engine_nozzle_17;
				begin = engine_nozzle_17_start;
				end = engine_nozzle_17_end;
			};
			class engine_nozzle_18: engine_nozzle_17
			{
				selection = engine_nozzle_18;
				begin = engine_nozzle_18_start;
				end = engine_nozzle_18_end;
			};
			class engine_nozzle_19: engine_nozzle_18
			{
				selection = engine_nozzle_19;
				begin = engine_nozzle_19_start;
				end = engine_nozzle_19_end;
			};
			class engine_nozzle_20: engine_nozzle_19
			{
				selection = engine_nozzle_20;
				begin = engine_nozzle_20_start;
				end = engine_nozzle_20_end;
			};
			class engine_nozzle_21: engine_nozzle_20
			{
				selection = engine_nozzle_21;
				begin = engine_nozzle_21_start;
				end = engine_nozzle_21_end;
			};
			class engine_nozzle_22: engine_nozzle_21
			{
				selection = engine_nozzle_22;
				begin = engine_nozzle_22_start;
				end = engine_nozzle_22_end;
			};
			class engine_nozzle_23: engine_nozzle_22
			{
				selection = engine_nozzle_23;
				begin = engine_nozzle_23_start;
				end = engine_nozzle_23_end;
			};
			class engine_nozzle_24: engine_nozzle_23
			{
				selection = engine_nozzle_24;
				begin = engine_nozzle_24_start;
				end = engine_nozzle_24_end;
			};

			// fire animations
			class FireEffect
			{
				type = hide;
				source = rpm;
				selection = fire;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.5;
			};

			// ejection animations
			class canopy_hide
			{
				type = hide;
				source = user;
				selection = canopy_elevator;
				minValue = 0;
				maxValue = 1;
				minPhase = 0;
				maxPhase = 1;
				initPhase = 0;
				hideValue = 0.001;
			};
			class ejection_seat_hide
			{
				type = hide;
				source = user;
				selection = ejection_seat;
				minPhase = 0;
				maxPhase = 1;
				initPhase = 0;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.001;
			};
			class ejection_seat_motion
			{
				type = translation;
				source = user;
				selection = ejection_seat;
				begin = tns_ejection_seat;
				end = tns_ejection_seat_end;
				animPeriod = 0;
				memory = true;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = 3;
			};

			// pylon animations
			class pylon_damagehide
			{
				type = hide;
				source = damage;
				selection = pylonhide;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.99999;
				unHideValue = -1;
			};
			class pylon_1_hide
			{
				type = hide;
				source = user;
				selection = pylon_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.001;
				unHideValue = -1;
			};
			class pylon_2_hide: pylon_1_hide
			{
				selection = pylon_2;
			};
			class pylon_3_hide: pylon_1_hide
			{
				selection = pylon_3;
			};
			class pylon_4_hide: pylon_1_hide
			{
				selection = pylon_4;
			};
			class pylon_5_hide: pylon_1_hide
			{
				selection = pylon_5;
			};
			class pylon_6_hide: pylon_1_hide
			{
				selection = pylon_6;
			};
		};
	};
	class Plane_Fighter_05_Ejection_Seat_F: Default
	{
		skeletonName = Plane_Fighter_05_Ejection_Seat_F_skeleton;
		sectionsInherit = "";
		sections[] = {zasleh};
		class Animations
		{
			// fire animations
			class Rocket_Flash_hide
			{
				type = hide;
				source = user;
				selection = rocket_flash;
				sourceAddress = mirror;
				minValue = -1.5;
				maxValue = 0;
				hideValue = 0.99;
			};
		};
	};
};
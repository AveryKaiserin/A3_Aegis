#define ADD_COMPONENT(component) \
	class Add##component \
	{ \
		selection = z_##component; \
		source = Add##component; \
		type = hide; \
		sourceAddress = mirror; \
		minValue = -1; \
		maxValue = 0; \
		hideValue = 0.5; \
	};

#define ALTITUDE_1000F(x) \
	class I_Altitude_1000f_##x: I_Altitude_1000f \
	{ \
		minValue = 304.8*x - 30.48; \
		maxValue = 304.8*x; \
	}; \
	class I_Altitude02_1000f_##x: I_Altitude_1000f_##x \
	{ \
		selection = i_alt02_1000f; \
		axis = i_altitude02_axis; \
	};

#define ALTITUDE_10000F(x) \
	class I_Altitude_10000f_##x: I_Altitude_10000f \
	{ \
		minValue = 3048*x - 30.48; \
		maxValue = 3048*x; \
	}; \
	class I_Altitude02_10000f_##x: I_Altitude_10000f_##x \
	{ \
		selection = i_alt02_1000f; \
		axis = i_altitude02_axis; \
	};

class CfgSkeletons
{
	class Helicopter_H;
	class MyHelicopter_Base_H: Helicopter_H
	{
		skeletonInherit = "Helicopter_H";
		skeletonBones[] =
		{
			"doorL1","",
			"doorL2","",
			"doorL3","",
			"doorR1","",
			"doorR2","",
			"doorR3","",
			"hatchL","",
			"hatchR","",
			"rotorCover","",

			"swashPlate","",
			"swashPlate02","",

			"i_speed02","",
			"i_vspeed02","",
			"i_compass02","",
			"i_compass03","",
			"i_horizontSphere","",
			"i_horizontSphere02","",
			"i_horizont","i_bank",
			"i_wp02","",
			"i_alt02_100f","",
			"i_altA_100f","",
			"i_alt02A_100f","",
			"i_altB_100f","",
			"i_alt02B_100f","",
			"i_alt02_1000f","",
			"i_alt02_10000f","",
			"i_rpmB","",
			"i_rpm02","",
			"i_rpm02B","",
			"i_torqueB","",
			"i_torqueC","",
			"i_torque02","",
			"i_torque02B","",
			"i_torque02C","",
			"i_fuel02","",
			"i_gas","",
			"i_gas02","",
			"i_TOT02","",
			"i_oilTemp02","",
			"i_oilTemp03","",
			"i_oilTemp04","",
			"i_oilTemp05","",
			"i_oilTemp06","",
			"i_dc","",
			"i_dc02","",
			"i_ac02","",
			"i_oilPress02","",
			"i_fuelPress","",
			"i_fuelPress02","",
			"i_transPress","",
			"i_transPress02","",
			"i_hydrPress","",
			"i_hydrPress02","",

			"z_FLIR","",
			"z_FLIR_HRot","z_FLIR",
			"z_FLIR_VRot","z_FLIR_HRot",

			"z_SearchLight","",
			"z_SearchLight_HRot","z_SearchLight",
			"z_SearchLight_VRot","z_SearchLight_HRot",

			"z_CargoHook","",
			"z_CargoHook_cover","",
			"z_noseradar","",
		};
	};
	class MyMilitaryHelicopter_H: MyHelicopter_Base_H
	{
		skeletonInherit = "MyHelicopter_Base_H";
		skeletonBones[] =
		{
			"z_military_cargoseats","",
			"z_Guns","",
			"z_GunL_HRot","z_Guns",
			"z_GunR_HRot","z_Guns",
			"z_GunL_VRot","z_GunL_HRot",
			"z_GunR_VRot","z_GunR_HRot",
			"z_gatlingL","z_GunL_VRot",
			"z_gatlingR","z_GunR_VRot",
			"z_weapons","",
			"z_weapons2","",
			"z_weapons3",""
		};
	};
	class JK_Medic_Helicopter_H: MyHelicopter_Base_H
	{
		skeletonInherit = "MyHelicopter_Base_H";
		skeletonBones[] =
		{
			"z_SearchLight","",
			"z_SearchLight_HRot","z_SearchLight",
			"z_SearchLight_VRot","z_SearchLight_HRot",
		};
	};
	class JK_Luxury_Helicopter_H: MyHelicopter_Base_H
	{
		skeletonInherit = "MyHelicopter_Base_H";
		skeletonBones[] =
		{
			"doorL1","",
			"doorL2","",
			"doorL3","",
			"doorR1","",
			"doorR2","",
			"doorR3","",
			"hatchL","",
			"hatchR","",
			"rotorCover","",
		};
	};
	class JK_Fia_Helicopter_H: MyHelicopter_Base_H
	{
		skeletonInherit = "MyHelicopter_Base_H";
		skeletonBones[] =
		{
			"doorL2","",
			"doorR1","",
			"doorR2",""
		};
	};
};

class Rotation;
class Hide;

class CfgModels
{
	class Vehicle_H;
	class Helicopter_H: Vehicle_H
	{
		class Animations
		{
			class BladeM01_Bend;
			class BladeM02_Bend;
			class BladeM03_Bend;
			class BladeM04_Bend;
			class BladeM05_Bend;

			class BladeM01_Dive;
			class BladeM02_Dive;
			class BladeM03_Dive;
			class BladeM04_Dive;

			class BladeM01_Bank;
			class BladeM02_Bank;
			class BladeM03_Bank;
			class BladeM04_Bank;

			class BladeM01_Collective;
			class BladeM02_Collective;
			class BladeM03_Collective;
			class BladeM04_Collective;

			class I_Speed;
			class I_RPM;
			class I_VSpeed;
			class I_Compass;
			class I_WP;
			class I_Torque;
			class I_Fuel;
			class I_TOT;
			class I_OilTemp;
			class I_OilPress;
			class I_AC;

			class I_Altitude_100f;
			class I_Altitude_1000f;
			class I_Altitude_10000f;

			class BladeM01_Joint_Bank_Tilt;
			class BladeM01_Joint_Dive_Tilt;
		};
	};
	class MyHelicopter_Base_H: Helicopter_H
	{
		skeletonName = "MyHelicopter_Base_H";
		sectionsInherit = "Helicopter_H";
		sections[]=
		{
			"camo1", "camo2", "camo3"
		};
		class Animations: Animations
		{
			// >> Main rotor
			class BladeM01_Dive: BladeM01_Dive {angle0 = "rad 10"; angle1 = "rad -10";};
			class BladeM02_Dive: BladeM02_Dive {angle0 = "rad 10"; angle1 = "rad -10";};
			class BladeM03_Dive: BladeM03_Dive {angle0 = "rad 10"; angle1 = "rad -10";};
			class BladeM04_Dive: BladeM04_Dive {angle0 = "rad 10"; angle1 = "rad -10";};

			class BladeM01_Bank: BladeM01_Bank {angle0 = "rad -10"; angle1 = "rad 10";};
			class BladeM02_Bank: BladeM02_Bank {angle0 = "rad -10"; angle1 = "rad 10";};
			class BladeM03_Bank: BladeM03_Bank {angle0 = "rad -10"; angle1 = "rad 10";};
			class BladeM04_Bank: BladeM04_Bank {angle0 = "rad -10"; angle1 = "rad 10";};

			class BladeM01_Collective: BladeM01_Collective {angle0 = "rad 0"; angle1 = "rad 15";};
			class BladeM02_Collective: BladeM02_Collective {angle0 = "rad 0"; angle1 = "rad 15";};
			class BladeM03_Collective: BladeM03_Collective {angle0 = "rad 0"; angle1 = "rad 15";};
			class BladeM04_Collective: BladeM04_Collective {angle0 = "rad 0"; angle1 = "rad 15";};

			class SwashPlate_Rotation: Rotation
			{
				selection = "swashPlate";
				source = RotorH;
				axis = "swashPlate_axis";
				angle1 = "rad 360";
			};
			class SwashPlate02_Rotation: SwashPlate_Rotation {selection = "swashPlate02"; axis = "swashPlate02_axis";};

			class SwashPlate_Dive
			{
				type = "rotationX";
				selection = "swashPlate";
				source = "cyclicForward";
				axis = "swashPlate_axis";
				memory = 1;
				minValue = -1;
				maxValue = 1;
				angle0 = "rad 5";
				angle1 = "rad -5";
			};
			class SwashPlate_Bank: SwashPlate_Dive
			{
				type = "rotationZ";
				source = "cyclicAside";
				angle0 = "rad -5";
				angle1 = "rad 5";
			};

			class SwashPlate_Dive02: SwashPlate_Dive {selection = "swashPlate02"; axis = "swashPlate02_axis";};
			class SwashPlate_Bank02: SwashPlate_Bank {selection = "swashPlate02"; axis = "swashPlate02_axis";};

			#define BLADE_BEND -0.6
			class BladeM01_Bend: BladeM01_Bend {offset1 = BLADE_BEND;};
			class BladeM02_Bend: BladeM02_Bend {offset1 = BLADE_BEND;};
			class BladeM03_Bend: BladeM03_Bend {offset1 = BLADE_BEND;};
			class BladeM04_Bend: BladeM04_Bend {offset1 = BLADE_BEND;};
			class BladeM05_Bend: BladeM05_Bend {offset1 = BLADE_BEND;};
			// << Main rotor

			// >> Indicators
			class I_Speed: I_Speed
			{
				minValue = 0;
				maxValue = 10.288889;
				angle0 = 0;
				angle1 = "rad 8";
			};
			class I_Speed_02: I_Speed {minValue = 10.288890; maxValue = 15.433333; angle1 = "rad 30";};
			class I_Speed_03: I_Speed {minValue = 15.433334; maxValue = 25.722222; angle1 = "rad 90";};
			class I_Speed_04: I_Speed {minValue = 25.722223; maxValue = 46.300000; angle1 = "rad 80";};
			class I_Speed_05: I_Speed {minValue = 46.300001; maxValue = 72.022222; angle1 = "rad 115";};
			class I_Speed_06: I_Speed {minValue = 72.022223; maxValue = 77.166667; angle1 = "rad 22";};

			class I_Speed02: I_Speed {selection = "i_speed02"; axis = "i_speed02_axis";};
			class I_Speed02_02: I_Speed_02 {selection = "i_speed02"; axis = "i_speed02_axis";};
			class I_Speed02_03: I_Speed_03 {selection = "i_speed02"; axis = "i_speed02_axis";};
			class I_Speed02_04: I_Speed_04 {selection = "i_speed02"; axis = "i_speed02_axis";};
			class I_Speed02_05: I_Speed_05 {selection = "i_speed02"; axis = "i_speed02_axis";};
			class I_Speed02_06: I_Speed_06 {selection = "i_speed02"; axis = "i_speed02_axis";};

			class I_RPM: I_RPM
			{
				maxValue = 1.2;
				angle0 = 0;
				angle1 = "rad 328";
			};
			class I_RPMB: I_RPM {selection = "i_rpmB"; source = rpm2RTD;};
			class I_RPM02: I_RPM {selection = "i_rpm02"; axis = "i_rpm02_axis";};
			class I_RPM02B: I_RPMB {selection = "i_rpm02B"; axis = "i_rpm02_axis";};

			class I_VSpeed: I_VSpeed
			{
				minValue = -5.080000;
				maxValue = 5.080000;
				angle0 = "rad -70";
				angle1 = "rad 70";
			};
			class I_VSpeed_02a: I_VSpeed {minValue = 5.080001; maxValue = 15.240000; angle0 = 0; angle1 = "rad 77";};
			class I_VSpeed_02b: I_VSpeed {minValue = -15.240000; maxValue = -5.080001; angle0 = "rad -77"; angle1 = 0;};
			class I_VSpeed_03a: I_VSpeed {minValue = 15.240001; maxValue = 20.320000; angle0 = 0; angle1 = "rad 26";};
			class I_VSpeed_03b: I_VSpeed {minValue = -20.320000; maxValue = -15.240001; angle0 = "rad -26";	angle1 = 0;};

			class I_VSpeed02: I_VSpeed {selection = "i_vspeed02"; axis = "i_vspeed02_axis";};
			class I_VSpeed02_02a: I_VSpeed_02a {selection = "i_vspeed02"; axis = "i_vspeed02_axis";};
			class I_VSpeed02_02b: I_VSpeed_02b {selection = "i_vspeed02"; axis = "i_vspeed02_axis";};
			class I_VSpeed02_03a: I_VSpeed_03a {selection = "i_vspeed02"; axis = "i_vspeed02_axis";};
			class I_VSpeed02_03b: I_VSpeed_03b {selection = "i_vspeed02"; axis = "i_vspeed02_axis";};

			class i_horizontSphere_bank
			{
				selection = "i_horizontSphere";
				type = rotationZ;
				source = attitudeBankRTD;
				axis = "i_horizontSphere_axis";
				memory = 1;
				minValue = "rad -360";
				maxValue = "rad +360";
				angle0 = "rad +360";
				angle1 = "rad -360";
			};
			class i_horizontSphere_dive: i_horizontSphere_bank
			{
				type = rotationX;
				source = attitudeDiveRTD;
				minValue = "rad -45";
				maxValue = "rad +45";
				angle0 = "rad -45";
				angle1 = "rad +45";
			};
			class i_horizontSphere02_bank: i_horizontSphere_bank {selection = "i_horizontSphere02"; axis = "i_horizontSphere02_axis";};
			class i_horizontSphere02_dive: i_horizontSphere_dive {selection = "i_horizontSphere02"; axis = "i_horizontSphere02_axis";};

			class I_Compass02: I_Compass
			{
				selection = i_compass02;
				axis = i_compass02_axis;
			};
			class I_WP02: I_WP
			{
				selection = i_wp02;
				axis = i_compass02_axis;
			};

			class I_Altitude02_100f: I_Altitude_100f
			{
				selection = i_alt02_100f;
				axis = i_altitude02_axis;
			};

			class I_Altitude_1000f: I_Altitude_1000f
			{
				sourceAddress = clamp;
				minValue = 304.8 - 30.48;
				maxValue = 304.8;
				angle1 = rad 36;
			};
			class I_Altitude02_1000f: I_Altitude_1000f
			{
				selection = i_alt02_1000f;
				axis = i_altitude02_axis;
			};
			ALTITUDE_1000F(2)
			ALTITUDE_1000F(3)
			ALTITUDE_1000F(4)
			ALTITUDE_1000F(5)
			ALTITUDE_1000F(6)
			ALTITUDE_1000F(7)
			ALTITUDE_1000F(8)
			ALTITUDE_1000F(9)
			ALTITUDE_1000F(10)
			ALTITUDE_1000F(11)
			ALTITUDE_1000F(12)
			ALTITUDE_1000F(13)
			ALTITUDE_1000F(14)
			ALTITUDE_1000F(15)
			ALTITUDE_1000F(16)
			ALTITUDE_1000F(17)
			ALTITUDE_1000F(18)
			ALTITUDE_1000F(19)
			ALTITUDE_1000F(20)
			ALTITUDE_1000F(21)
			ALTITUDE_1000F(22)
			ALTITUDE_1000F(23)
			ALTITUDE_1000F(24)
			ALTITUDE_1000F(25)
			ALTITUDE_1000F(26)
			ALTITUDE_1000F(27)
			ALTITUDE_1000F(28)
			ALTITUDE_1000F(29)
			ALTITUDE_1000F(30)
			ALTITUDE_1000F(31)
			ALTITUDE_1000F(32)

			class I_Altitude_10000f: I_Altitude_10000f
			{
				sourceAddress = clamp;
				minValue = 3048 - 30.48;
				maxValue = 3048;
				angle1 = rad 36;
			};
			class I_Altitude02_10000f: I_Altitude_10000f
			{
				selection = i_alt02_10000f;
				axis = i_altitude02_axis;
			};
			ALTITUDE_10000F(2)
			ALTITUDE_10000F(3)

			class I_AltitudeA_100f: I_Altitude_100f
			{
				selection = i_altA_100f;
				axis = i_altitudeA_100f_axis;
			};
			class I_Altitude02A_100f: I_Altitude_100f {selection = i_alt02A_100f; axis = i_altitude02A_100f_axis;};

			class I_AltitudeB_100f: I_Altitude_100f
			{
				selection = i_altB_100f;
				source = altRadarRTD;
				sourceAddress = clamp;
				axis = i_altitudeB_100f_axis;
				maxValue = 60.96;
				angle1 = "rad 180";
			};
			class I_AltitudeB_100f_02: I_AltitudeB_100f {minValue = 60.960001; maxValue = 152.4; angle1 = "rad 25";};
			class I_AltitudeB_100f_03: I_AltitudeB_100f {minValue = 152.400001; maxValue = 457.2; angle1 = "rad 85";};

			class I_Altitude02B_100f: I_AltitudeB_100f {selection = i_alt02B_100f; axis = i_altitude02B_100f_axis;};
			class I_Altitude02B_100f_02: I_AltitudeB_100f_02 {selection = i_alt02B_100f; axis = i_altitude02B_100f_axis;};
			class I_Altitude02B_100f_03: I_AltitudeB_100f_03 {selection = i_alt02B_100f; axis = i_altitude02B_100f_axis;};

			class I_Horizont
			{
				selection = "i_horizont";
				type = translation;
				source = attitudeDiveRTD;
				axis = "i_horizont_axis";
				memory = 1;
				minValue = "rad -25.714286";
				maxValue = "rad 25.714286";
				offset0 = -0.27;  //42
				offset1 = 0.27;
			};

			class I_Torque: I_Torque
			{
				minValue = 0.1;
				maxValue = 0.55;
				angle0 = 0;
				angle1 = "rad 150";
			};
			class I_TorqueB: I_Torque
			{
				selection = "i_torqueB";
				source = torqueEng1RTD;
				minValue = 0;
				maxValue = 0.5;
				angle0 = 0;
				angle1 = "rad - 150";
			};
			class I_TorqueC: I_TorqueB {selection = "i_torqueC"; source = torqueEng2RTD;};

			class I_Torque02:  I_Torque  {selection = "i_torque02";  axis = "i_torque02_axis";};
			class I_Torque02B: I_TorqueB {selection = "i_torque02B"; axis = "i_torque02_axis";};
			class I_Torque02C: I_TorqueC {selection = "i_torque02C"; axis = "i_torque02_axis";};

			class I_Fuel: I_Fuel
			{
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = "rad 108";
			};
			class I_Fuel02: I_Fuel {selection = "i_fuel02"; axis = "i_fuel02_axis"; angle1 = "rad 102";};

			class I_Gas: Rotation
			{
				selection = "i_gas";
				source = "rpm1RTD";
				axis = "i_gas_axis";
				maxValue = 1.1;
				angle1 = "rad 297";
			};
			class I_Gas02: I_Gas {selection = "i_gas02"; axis = "i_gas02_axis"; source = "rpm2RTD";};

			class I_TOT: I_TOT {minValue = 1/8*2.5; maxValue = 1/8*7; angle0 = "rad 22"; angle1 = "rad 112";};
			class I_TOT_02: I_TOT {minValue = 1/8*7+0.000001; maxValue = 1/8*10; angle0 = 0; angle1 = "rad 219";};
			class I_TOT_03: I_TOT_02 {minValue = 1/8*10+0.000001; maxValue = 1.3; angle1 = "rad 19";};

			class I_TOT02: I_TOT {source = temp2RTD; selection = "i_TOT02"; axis = "i_TOT02_axis";};
			class I_TOT02_02: I_TOT_02 {source = temp2RTD; selection = "i_TOT02"; axis = "i_TOT02_axis";};
			class I_TOT02_03: I_TOT_03 {source = temp2RTD; selection = "i_TOT02"; axis = "i_TOT02_axis";};

			class I_OilTemp: I_OilTemp {minValue = 0; maxValue = 1.3; angle0 = 0; angle1 = "rad 85";};
			class I_OilTemp02: I_OilTemp {source = temp2RTD; selection = "i_oilTemp02"; axis = "i_oilTemp02_axis";};
			class I_OilTemp03: I_OilTemp {selection = "i_oilTemp03"; axis = "i_oilTemp03_axis"; angle1 = rad 82;};
			class I_OilTemp04: I_OilTemp02 {selection = "i_oilTemp04"; axis = "i_oilTemp04_axis"; angle1 = rad 82;};
			class I_OilTemp05: I_OilTemp03 {selection = "i_oilTemp05"; axis = "i_oilTemp05_axis";};
			class I_OilTemp06: I_OilTemp04 {selection = "i_oilTemp06"; axis = "i_oilTemp06_axis";};

			class I_DC: Rotation
			{
				selection = "i_dc";
				source = rpm1RTD;
				axis = "i_dc_axis";
				minValue = 0.5;
				maxValue = 1;
				angle0 = "rad -50";
				angle1 = "rad 30";
			};
			class I_DC02: I_DC {selection = "i_dc02"; source = rpm2RTD; axis = "i_DC02_axis";};

			class I_AC: I_AC
			{
				angle0 = "rad -50";
				angle1 = "rad 80";
			};
			class I_AC02: I_AC {selection = "i_ac02"; axis = "i_ac02_axis";};

			class I_OilPress: I_OilPress {minValue = 0; angle0 = "rad -75"; angle1 = "rad 0";};
			class I_OilPress02: I_OilPress {selection = "i_oilPress02"; source = HitEngine2; axis = "i_oilPress02_axis";};

			class I_FuelPress: I_OilPress {selection = "i_fuelPress"; axis = "i_fuelPress_axis"; angle0 = "rad 140"; angle1 = 0;};
			class I_FuelPress02: I_OilPress02 {selection = "i_fuelPress02"; axis = "i_fuelPress02_axis"; angle0 = "rad 140"; angle1 = 0;};

			class I_TransPress: Rotation
			{
				selection = "i_transPress";
				source = HitTransmission;
				axis = "i_transPress_axis";
				angle0 = "rad -65";
				angle1 = "rad 4";
			};
			class I_TransPress02: I_TransPress {selection = "i_transPress02"; axis = "i_transPress02_axis";};

			class I_HydrPress: Rotation
			{
				selection = "i_hydrPress";
				source = HitHydraulics;
				axis = "i_hydrPress_axis";
				angle0 = "rad -72";
				angle1 = "rad 4";
			};
			class I_HydrPress02: I_HydrPress {selection = "i_hydrPress02"; axis = "i_hydrPress02_axis";};
			// << Indicators

			// >> Doors & Hatches
			class DoorL1_Open: Rotation
			{
				selection = "doorL1";
				source = DoorL1_Open;
				axis = "doorL1_axis";
				angle1 = "rad 85";
			};
			class DoorR1_Open: DoorL1_Open
			{
				selection = "doorR1";
				source = DoorR1_Open;
				axis = "doorR1_axis";
				angle1 = "rad -85";
			};
			class DoorL2_Open: Rotation
			{
				selection = "doorL2";
				source = DoorL2_Open;
				axis = "doorL2_axis";
				angle1 = "rad 65";
			};
			class DoorR2_Open: DoorL2_Open
			{
				selection = "doorR2";
				source = DoorR2_Open;
				axis = "doorR2_axis";
				angle1 = "rad -65";
			};
			class DoorL3_Open: Rotation
			{
				selection = "doorL3";
				source = DoorL3_Open;
				axis = "doorL3_axis";
				angle1 = "rad -15";
			};
			class DoorR3_Open: DoorL3_Open
			{
				selection = "doorR3";
				source = DoorR3_Open;
				axis = "doorR3_axis";
				angle1 = "rad 15";
			};

			class Inspect_Panel1_1: Rotation
			{
				selection = "hatchL";
				source = Inspect_Panel1_1;
				axis = "hatchL_axis";
				angle1 = "rad -95";
			};
			class Inspect_Panel2_1: Inspect_Panel1_1
			{
				selection = "hatchR";
				source = Inspect_Panel2_1;
				axis = "hatchR_axis";
				angle1 = "rad 95";
			};
			class RotorCover_Hide: Hide
			{
				selection = "rotorCover";
				source = RotorCover_Hide;
				hideValue = 0.5;
			};
			// << Doors & Hatches

			// tilt compensation for hover
			class BladeM01_Joint_Bank_Tilt : BladeM01_Joint_Bank_Tilt
			{
				angle1 = "rad 2.4";
			};
			class BladeM02_Joint_Bank_Tilt: BladeM01_Joint_Bank_Tilt {selection = "bladeM02_bank_tilt"; axis = "bladeM02_joint";};
			class BladeM03_Joint_Bank_Tilt: BladeM01_Joint_Bank_Tilt {selection = "bladeM03_bank_tilt"; axis = "bladeM03_joint";};
			class BladeM04_Joint_Bank_Tilt: BladeM01_Joint_Bank_Tilt {selection = "bladeM04_bank_tilt"; axis = "bladeM04_joint";};
			class BladeM05_Joint_Bank_Tilt: BladeM01_Joint_Bank_Tilt {selection = "bladeM05_bank_tilt"; axis = "bladeM05_joint";};
			class BladeM01_Joint_Dive_Tilt : BladeM01_Joint_Dive_Tilt
			{
				angle1 = "rad -5";
			};
			class BladeM02_Joint_Dive_Tilt: BladeM01_Joint_Dive_Tilt {selection = "bladeM02_dive_tilt"; axis = "bladeM02_joint";};
			class BladeM03_Joint_Dive_Tilt: BladeM01_Joint_Dive_Tilt {selection = "bladeM03_dive_tilt"; axis = "bladeM03_joint";};
			class BladeM04_Joint_Dive_Tilt: BladeM01_Joint_Dive_Tilt {selection = "bladeM04_dive_tilt"; axis = "bladeM04_joint";};
			class BladeM05_Joint_Dive_Tilt: BladeM01_Joint_Dive_Tilt {selection = "bladeM05_dive_tilt"; axis = "bladeM05_joint";};
			class z_noseradar
			{
				type="hide";
				source="user";
				selection="z_noseradar";
				minValue=0;
                                maxValue=1;
			};
		};
	};
	class JK_Medium_Helicopter_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "camo4", "landingLight01_pos", "zaslehL", "zaslehR", "z_searchLight_cone"};
		skeletonName = MyMilitaryHelicopter_H;

		class Animations: Animations
		{
			ADD_COMPONENT(Military_cargoseats)
			ADD_COMPONENT(CargoHook)
			ADD_COMPONENT(CargoHook_cover)

			class GunL_HRot
			{
			    selection = "z_gunL_HRot";
			    source = GunL_HRot;
			    type = "rotation";
			    axis = "z_gunL_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class GunL_VRot: GunL_HRot
			{
				selection = "z_gunL_VRot";
				source = GunL_VRot;
				axis = "z_gunL_VRot_axis";
			};
			class GunL_Revolving: Rotation
			{
				selection = "z_gatlingL";
				source = GunL_Revolving;
				axis = "z_gatlingL_axis";
				angle1 = "rad 120000*3";
			};
			class GunR_HRot: GunL_HRot 
                        {
                                selection = "z_gunR_HRot"; 
                                source = GunR_HRot; 
                                axis = "z_gunR_HRot_axis";
                        };
			class GunR_VRot: GunL_VRot 
                        {      
                               selection = "z_gunR_VRot"; 
                               source = GunR_VRot; 
                               axis = "z_gunR_VRot_axis";
                        };
			class GunR_Revolving: GunL_Revolving 
                        {
                               selection = "z_gatlingR";	
                               source = GunR_Revolving; 
                               axis = "z_gatlingR_axis";
                        };
			class FLIR_HRot
			{
			    type = "rotation";
			    source = "FLIR_HRot";
			    selection = "z_FLIR_HRot";
			    axis = "z_FLIR_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class FLIR_VRot: FLIR_HRot
			{
			    source = "FLIR_VRot";
			    selection = "z_FLIR_VRot";
			    axis = "z_FLIR_VRot_axis";
			};

			class SearchLight_HRot
			{
			    selection = "z_searchLight_HRot";
			    source = SearchLight_HRot;
			    type = "rotation";
			    axis = "z_searchLight_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class SearchLight_VRot: SearchLight_HRot
			{
				selection = "z_searchLight_VRot";
				source = SearchLight_VRot;
				axis = "z_searchLight_VRot_axis";
			};
			class z_weapons
			{
				type="hide";
				source="user";
				selection="z_weapons";
				minValue=0;
                                maxValue=1;
			};
			class z_weapons2
			{
				type="hide";
				source="user";
				selection="z_weapons2";
				minValue=0;
                                maxValue=1;
			};
			class z_weapons3
			{
				type="hide";
				source="user";
				selection="z_weapons3";
				minValue=0;
                                maxValue=1;
			};
		};
	};
	class JK_Medium_Helicopter_medic_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "landingLight01_pos", "z_searchLight_cone"};
		skeletonName = JK_Medic_Helicopter_H;

		class Animations: Animations
		{
			class SearchLight_HRot
			{
			    selection = "z_searchLight_HRot";
			    source = SearchLight_HRot;
			    type = "rotation";
			    axis = "z_searchLight_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class SearchLight_VRot: SearchLight_HRot
			{
				selection = "z_searchLight_VRot";
				source = SearchLight_VRot;
				axis = "z_searchLight_VRot_axis";
			};
		};
	};
	class JK_Medium_Helicopter_luxury_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "landingLight01_pos"};
		skeletonName = JK_Luxury_Helicopter_H;

		class Animations: Animations
		{
			class DoorL1_Open: Rotation
			{
				selection = "doorL1";
				source = DoorL1_Open;
				axis = "doorL1_axis";
				angle1 = "rad 85";
			};
			class DoorR1_Open: DoorL1_Open
			{
				selection = "doorR1";
				source = DoorR1_Open;
				axis = "doorR1_axis";
				angle1 = "rad -85";
			};
			class DoorL2_Open: Rotation
			{
				selection = "doorL2";
				source = DoorL2_Open;
				axis = "doorL2_axis";
				angle1 = "rad 65";
			};
			class DoorR2_Open: DoorL2_Open
			{
				selection = "doorR2";
				source = DoorR2_Open;
				axis = "doorR2_axis";
				angle1 = "rad -65";
			};
			class DoorL3_Open: Rotation
			{
				selection = "doorL3";
				source = DoorL3_Open;
				axis = "doorL3_axis";
				angle1 = "rad -15";
			};
			class DoorR3_Open: DoorL3_Open
			{
				selection = "doorR3";
				source = DoorR3_Open;
				axis = "doorR3_axis";
				angle1 = "rad 15";
			};
			class Inspect_Panel1_1: Rotation
			{
				selection = "hatchL";
				source = Inspect_Panel1_1;
				axis = "hatchL_axis";
				angle1 = "rad -95";
			};
			class Inspect_Panel2_1: Inspect_Panel1_1
			{
				selection = "hatchR";
				source = Inspect_Panel2_1;
				axis = "hatchR_axis";
				angle1 = "rad 95";
			};
			class RotorCover_Hide: Hide
			{
				selection = "rotorCover";
				source = RotorCover_Hide;
				hideValue = 0.5;
			};
		};
	};
	class JK_Medium_Helicopter_civil_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "landingLight01_pos"};
		skeletonName = MyHelicopter_Base_H;

		class Animations: Animations
		{
			class DoorL1_Open: Rotation
			{
				selection = "doorL1";
				source = DoorL1_Open;
				axis = "doorL1_axis";
				angle1 = "rad 85";
			};
			class DoorR1_Open: DoorL1_Open
			{
				selection = "doorR1";
				source = DoorR1_Open;
				axis = "doorR1_axis";
				angle1 = "rad -85";
			};
			class DoorL2_Open: Rotation
			{
				selection = "doorL2";
				source = DoorL2_Open;
				axis = "doorL2_axis";
				angle1 = "rad 65";
			};
			class DoorR2_Open: DoorL2_Open
			{
				selection = "doorR2";
				source = DoorR2_Open;
				axis = "doorR2_axis";
				angle1 = "rad -65";
			};
			class DoorL3_Open: Rotation
			{
				selection = "doorL3";
				source = DoorL3_Open;
				axis = "doorL3_axis";
				angle1 = "rad -15";
			};
			class DoorR3_Open: DoorL3_Open
			{
				selection = "doorR3";
				source = DoorR3_Open;
				axis = "doorR3_axis";
				angle1 = "rad 15";
			};
			class Inspect_Panel1_1: Rotation
			{
				selection = "hatchL";
				source = Inspect_Panel1_1;
				axis = "hatchL_axis";
				angle1 = "rad -95";
			};
			class Inspect_Panel2_1: Inspect_Panel1_1
			{
				selection = "hatchR";
				source = Inspect_Panel2_1;
				axis = "hatchR_axis";
				angle1 = "rad 95";
			};
			class RotorCover_Hide: Hide
			{
				selection = "rotorCover";
				source = RotorCover_Hide;
				hideValue = 0.5;
			};
		};
	};
	class JK_Medium_Helicopter_flir_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "camo4", "landingLight01_pos", "z_searchLight_cone"};
		skeletonName = MyHelicopter_Base_H;

		class Animations: Animations
		{
			class FLIR_HRot
			{
			    type = "rotation";
			    source = "FLIR_HRot";
			    selection = "z_FLIR_HRot";
			    axis = "z_FLIR_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class FLIR_VRot: FLIR_HRot
			{
			    source = "FLIR_VRot";
			    selection = "z_FLIR_VRot";
			    axis = "z_FLIR_VRot_axis";
			};
			class SearchLight_HRot
			{
			    selection = "z_searchLight_HRot";
			    source = SearchLight_HRot;
			    type = "rotation";
			    axis = "z_searchLight_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class SearchLight_VRot: SearchLight_HRot
			{
				selection = "z_searchLight_VRot";
				source = SearchLight_VRot;
				axis = "z_searchLight_VRot_axis";
			};
		};
	};
	class JK_Medium_Helicopter_military_utility_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "camo4", "landingLight01_pos", "z_searchLight_cone"};
		skeletonName = MyHelicopter_Base_H;

		class Animations: Animations
		{
			class FLIR_HRot
			{
			    type = "rotation";
			    source = "FLIR_HRot";
			    selection = "z_FLIR_HRot";
			    axis = "z_FLIR_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class FLIR_VRot: FLIR_HRot
			{
			    source = "FLIR_VRot";
			    selection = "z_FLIR_VRot";
			    axis = "z_FLIR_VRot_axis";
			};

			class SearchLight_HRot
			{
			    selection = "z_searchLight_HRot";
			    source = SearchLight_HRot;
			    type = "rotation";
			    axis = "z_searchLight_HRot_axis";
			    memory = 1;
			    minValue = "rad -360";
			    maxValue = "rad +360";
			    angle0 = "rad -360";
			    angle1 = "rad +360";
			};
			class SearchLight_VRot: SearchLight_HRot
			{
				selection = "z_searchLight_VRot";
				source = SearchLight_VRot;
				axis = "z_searchLight_VRot_axis";
			};
		};
	};
	class JK_Medium_Helicopter_fia_military_F: MyHelicopter_Base_H
	{
		sectionsInherit = MyHelicopter_Base_H;
		sections[] = {"camo1", "camo2", "camo3", "landingLight01_pos", "z_searchLight_cone"};
		skeletonName = JK_Fia_Helicopter_H;

		class Animations: Animations
		{
			class DoorR1_Open: DoorL1_Open
			{
				selection = "doorR1";
				source = DoorR1_Open;
				axis = "doorR1_axis";
				angle1 = "rad -85";
			};
			class DoorL2_Open: Rotation
			{
				selection = "doorL2";
				source = DoorL2_Open;
				axis = "doorL2_axis";
				angle1 = "rad 65";
			};
			class DoorR2_Open: DoorL2_Open
			{
				selection = "doorR2";
				source = DoorR2_Open;
				axis = "doorR2_axis";
				angle1 = "rad -65";
			};
		};
	};
};
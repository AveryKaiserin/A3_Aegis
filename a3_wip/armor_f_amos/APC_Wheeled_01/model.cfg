#include "\A3_Aegis\model_cfg_macros.hpp"

//################################################### S K E L E T O N S   B E G I N ###################################################
class CfgSkeletons
{
	class Default
	{
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};
	class Vehicle : Default {};
	class Car : Vehicle {
		skeletonBones[]=
		{
			"drivewheel","",

			"wheel_1_1_damper_land","",
			"wheel_1_2_damper_land","",
			"wheel_1_3_damper_land","",
			"wheel_1_4_damper_land","",

			"wheel_2_1_damper_land","",
			"wheel_2_2_damper_land","",
			"wheel_2_3_damper_land","",
			"wheel_2_4_damper_land","",

			"wheel_1_1_damper","wheel_1_1_damper_land",
			"wheel_1_2_damper","wheel_1_2_damper_land",
			"wheel_1_3_damper","wheel_1_3_damper_land",
			"wheel_1_4_damper","wheel_1_4_damper_land",

			"wheel_2_1_damper","wheel_2_1_damper_land",
			"wheel_2_2_damper","wheel_2_2_damper_land",
			"wheel_2_3_damper","wheel_2_3_damper_land",
			"wheel_2_4_damper","wheel_2_4_damper_land",

			"wheel_1_1_steering","wheel_1_1_damper",
			"wheel_1_2_steering","wheel_1_2_damper",
			"wheel_1_3_steering","wheel_1_3_damper",
			"wheel_1_4_steering","wheel_1_4_damper",

			"wheel_2_1_steering","wheel_2_1_damper",
			"wheel_2_2_steering","wheel_2_2_damper",
			"wheel_2_3_steering","wheel_2_3_damper",
			"wheel_2_4_steering","wheel_2_4_damper",

			"wheel_1_1","wheel_1_1_steering",
			"wheel_1_2","wheel_1_2_steering",
			"wheel_1_3","wheel_1_3_steering",
			"wheel_1_4","wheel_1_4_steering",

			"wheel_2_1","wheel_2_1_steering",
			"wheel_2_2","wheel_2_2_steering",
			"wheel_2_3","wheel_2_3_steering",
			"wheel_2_4","wheel_2_4_steering",

			"wheel_1_1_unhide","wheel_1_1",
			"wheel_1_2_unhide","wheel_1_2",
			"wheel_1_3_unhide","wheel_1_3",
			"wheel_1_4_unhide","wheel_1_4",

			"wheel_2_1_unhide","wheel_2_1",
			"wheel_2_2_unhide","wheel_2_2",
			"wheel_2_3_unhide","wheel_2_3",
			"wheel_2_4_unhide","wheel_2_4",

			"wheel_1_1_hide","wheel_1_1",
			"wheel_1_2_hide","wheel_1_2",
			"wheel_1_3_hide","wheel_1_3",
			"wheel_1_4_hide","wheel_1_4",

			"wheel_2_1_hide","wheel_2_1",
			"wheel_2_2_hide","wheel_2_2",
			"wheel_2_3_hide","wheel_2_3",
			"wheel_2_4_hide","wheel_2_4",

			"OtocVez","",
			"OtocHlaven","OtocVez",

			"damageHide","",
			"damageVez","OtocVez",
			"damageHlaven","OtocHlaven",

			"ukaz_rychlo","",
			"ukaz_rychlo2","",
			"ukaz_rpm","",
			"mph","",
			"rpm","",
			"fuel","",
			"fuel_1","",
			"fuel_01","",
			"fuel_2","",
			"fuel_3","",
			"prop_01","",
			"prop_02","",
			"prop_2","",
			"prop_1","",
			"glass1","damageHide",
			"glass2","damageHide",
			"glass3","damageHide",
			"glass4","damageHide"
		};
	};
	class APC_Wheeled_01_base_F_skeleton: Car
		{
		skeletonInherit="Car";
		skeletonBones[]=
		{
			"poklop_driver",			"",
			"otocvez",					"",
				"turret_base",			"otocvez",
				"otochlaven",			"otocvez",
					"gunnerview",		"otochlaven",
					"recoilhlaven",		"otochlaven",
					"zasleh",			"otochlaven",
					"zasleh2",			"otochlaven",
				"Commander_Turret",		"otocvez",
					"Commander_Gun",	"Commander_Turret",
				"poklop_commander",		"otocvez",
				"poklop_gunner",		"otocvez",
			"vrtuleA",					"",
			"vrtuleB",					"",
			"reverse_light",			"damageHide",
			"turret_control",			"otocvez",
			"com_turret_control",		"otocvez",
			//TANK DLC
			"rpm",								"", //consistent with class Car animations
			"lights_turret",					"otocvez",
			"lights_turret_off",				"otocvez",			
			"lights_driver",					"",
			"lights_driver_off",				"",
			"gear_stick",						"",
			"pedal_brake",						"",
			"pedal_thrust",						"",
			"speed_indicator",					"",
			"ammeter_indicator",				"",
			"ammeter_indicator_turret",			"otocvez",			
			"voltammeter_indicator",			"",
			"voltammeter_indicator_turret",		"otocvez",
			"voltammeter2_indicator_turret",	"voltammeter_indicator",			
			"oil_temp_indicator",				"",
			"water_temp_indicator",				"",
			"cannon_load_indicator",			"otocvez",
			"ammo_status_slider",				"otocvez",			
			"drivewheel",						"",
			"damage_engine",					"",		
			"damage_gun",						"otocvez",
			"damage_track",						"",		
			"OtocHlavenIn",						"OtocVez",
			"drivewheel",						"",
			"turret_control",					"otocvez",
			"com_turret_control",				"otocvez",
			//Tank Exclusive
			"drivingstick_left",				"",
			"drivingstick_right",				"",
			//MFD STUFF
			"driver_pip",						"",
			"mfd_pip_off_driver",				"",
			"mfd_pip_off_gunner",				"otocvez",
			"mfd_driver_hide",					"",
			"mfd_driver_fuel",					"mfd_driver_hide",
			"mfd_driver_speed",					"mfd_driver_hide",
			"mfd_driver_water",					"mfd_driver_hide",
			"mfd_driver_rpm",					"mfd_driver_hide",
			"mfd_driver_hull_dir",				"mfd_driver_hide",
			"mfd_driver_main_gun",				"mfd_driver_hide",
			"mfd_driver_com_gun",				"mfd_driver_hide",

			"mfd_dmg_engine",					"",
			"mfd_dmg_fuel",						"",
			"mfd_dmg_wheels",					"",

			"mfd_dmg_tur_engine",				"otocvez",
			"mfd_dmg_tur_fuel",					"otocvez",
			"mfd_dmg_tur_hull",					"otocvez",
			"mfd_dmg_tur_main_gun",				"otocvez",
			"mfd_dmg_tur_wheels",				"otocvez",
			"mfd_dmg_tur_turret",				"otocvez",

			"mfd_gun_cli",						"cannon_load_indicator",
			"mfd_gun_hull_dir",					"otocvez",
			"mfd_gun_main_gun",					"otocvez",
			"mfd_gun_com_gun",					"mfd_gun_main_gun",			

			"mfd_com_main_gun",					"otocvez",
			"mfd_com_com_gun",					"mfd_com_main_gun",

			"mfd_com_pip_off",					"otocvez",

			"mfd_onscreen_gunner_turret",		"mfd_com_pip_off",
			"mfd_onscreen_com_turret",			"mfd_onscreen_gunner_turret",

			"mfd_pip_off",						"",

			"vhc_bags",							"OtocVez",
			"vhc_camonet_hull",					"",
			"vhc_camonet_turret",				"OtocVez",
			"vhc_camonet_cannon",				"OtocHlaven",

			//Slat armor
			"cage",								"",
				"cage_front",					"cage",
				"cage_front_dmg",				"cage",
				"cage_front_dst",				"cage",

				"cage_back",					"cage",
				"cage_back_dmg",				"cage",
				"cage_back_dst",				"cage",

				"cage_left_1",					"cage",
				"cage_left_1_dmg",				"cage",
				"cage_left_1_dst",				"cage",

				"cage_left_2",					"cage",
				"cage_left_2_dmg",				"cage",
				"cage_left_2_dst",				"cage",

				"cage_left_3",					"cage",
				"cage_left_3_dmg",				"cage",
				"cage_left_3_dst",				"cage",

				"cage_right_1",					"cage",
				"cage_right_1_dmg",				"cage",
				"cage_right_1_dst",				"cage",

				"cage_right_2",					"cage",
				"cage_right_2_dmg",				"cage",
				"cage_right_2_dst",				"cage",

				"cage_right_3",					"cage",
				"cage_right_3_dmg",				"cage",
				"cage_right_3_dst",				"cage",	
			"cage_turret",						"otocvez",
				"cage_top_back",				"cage_turret",
				"cage_top_back_dmg",			"cage_turret",
				"cage_top_back_dst",			"cage_turret",

				"cage_top_left",				"cage_turret",
				"cage_top_left_dmg",			"cage_turret",
				"cage_top_left_dst",			"cage_turret",

				"cage_top_right",				"cage_turret",
				"cage_top_right_dmg",			"cage_turret",
				"cage_top_right_dst",			"cage_turret",

				"cage_front_geo",				"cage",
				"cage_back_geo",				"cage",
				"cage_left_1_geo",				"cage",
				"cage_left_2_geo",				"cage",
				"cage_left_3_geo",				"cage",
				"cage_right_1_geo",				"cage",
				"cage_right_2_geo",				"cage",
				"cage_right_3_geo",				"cage",

				"cage_top_back_geo",			"cage_turret",
				"cage_top_right_geo",			"cage_turret",
				"cage_top_left_geo",			"cage_turret"					
		};
	};
};
//################################################### S K E L E T O N S   E N D ###################################################
class CfgModels
{
	class Default
	{
		sectionsInherit = "";
		sections[] = {};
		skeletonName = "";
	};
	class Vehicle: Default
	{
		sections[] =
		{
			"cislo",
			"grupa",
			"side",
			"sektor",
			"clan",
			"clan_sign",
			"podsvit pristroju",
			"poskozeni",
			"L svetlo",
			"P svetlo",
			"zasleh"
		};
	};	
	class Car: Vehicle
	{
		class Animations
		{
			//class damageHide;
			class damageHide
			{
				type="hide";
				source="damage";
				selection="damageHide";
				hideValue=1.0;
			};
         
			// Wheels START
			// Wheels Complete Destruct START
			class wheel_1_1_destruct
			{
				type="hide";
				selection="wheel_1_1_hide";
				source="HitLFWheel";
				minValue = 0; // upravit na 0.99
				maxValue = 1; // upravit na 1.0
				hidevalue = 0.99999;
			};
			class wheel_1_2_destruct: wheel_1_1_destruct {source="HitLBWheel";selection="wheel_1_2_hide";};
			class wheel_1_3_destruct: wheel_1_1_destruct {source="HitLMWheel";selection="wheel_1_3_hide";};
			class wheel_1_4_destruct: wheel_1_1_destruct {source="HitLF2Wheel";selection="wheel_1_4_hide";};

			class wheel_2_1_destruct: wheel_1_1_destruct {source="HitRFWheel";selection="wheel_2_1_hide";};
			class wheel_2_2_destruct: wheel_1_1_destruct {source="HitRBWheel";selection="wheel_2_2_hide";};
			class wheel_2_3_destruct: wheel_1_1_destruct {source="HitRMWheel";selection="wheel_2_3_hide";};
			class wheel_2_4_destruct: wheel_1_1_destruct {source="HitRF2Wheel";selection="wheel_2_4_hide";};

			class wheel_1_1_destruct_unhide
			{
				type="hide";
				selection="wheel_1_1_unhide";
				source="HitLFWheel";
				minValue = 0; 
				maxValue = 1; 
				hidevalue = 0.00000;
				UnHidevalue = 1.00000;
			};
			class wheel_1_2_destruct_unhide: wheel_1_1_destruct_unhide {source="HitLBWheel";selection="wheel_1_2_unhide";};
			class wheel_1_3_destruct_unhide: wheel_1_1_destruct_unhide {source="HitLMWheel";selection="wheel_1_3_unhide";};
			class wheel_1_4_destruct_unhide: wheel_1_1_destruct_unhide {source="HitLF2Wheel";selection="wheel_1_4_unhide";};

			class wheel_2_1_destruct_unhide: wheel_1_1_destruct_unhide {source="HitRFWheel";selection="wheel_2_1_unhide";};
			class wheel_2_2_destruct_unhide: wheel_1_1_destruct_unhide {source="HitRBWheel";selection="wheel_2_2_unhide";};
			class wheel_2_3_destruct_unhide: wheel_1_1_destruct_unhide {source="HitRMWheel";selection="wheel_2_3_unhide";};
			class wheel_2_4_destruct_unhide: wheel_1_1_destruct_unhide {source="HitRF2Wheel";selection="wheel_2_4_unhide";};

			// Wheels Complete Destruct END

			#define DamageOffset 0.2

			// Wheels Damage START
			class wheel_1_1_Damage: wheel_1_1_destruct
			{
				type="translation";
				axis="Basic_Damper_Destruct_Axis";
				memory=1;
				selection="wheel_1_1_damper";
				source="HitLFWheel";
				minValue = 0.0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class wheel_1_2_Damage: wheel_1_1_Damage {source="HitLBWheel";selection="wheel_1_2_damper";};
			class wheel_1_3_Damage: wheel_1_1_Damage {source="HitLMWheel";selection="wheel_1_3_damper";};
			class wheel_1_4_Damage: wheel_1_1_Damage {source="HitLF2Wheel";selection="wheel_1_4_damper";};

			class wheel_2_1_Damage: wheel_1_1_Damage {source="HitRFWheel";selection="wheel_2_1_damper";};
			class wheel_2_2_Damage: wheel_1_1_Damage {source="HitRBWheel";selection="wheel_2_2_damper";};
			class wheel_2_3_Damage: wheel_1_1_Damage {source="HitRMWheel";selection="wheel_2_3_damper";};
			class wheel_2_4_Damage: wheel_1_1_Damage {source="HitRF2Wheel";selection="wheel_2_4_damper";};


			class wheel_1_1_Damper_Damage_BackAnim: wheel_1_1_Damage {selection="wheel_1_1_damper";offset1 = -1.2*DamageOffset;};
			class wheel_1_2_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitLBWheel";selection="wheel_1_2_damper";};
			class wheel_1_3_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitLMWheel";selection="wheel_1_3_damper";};
			class wheel_1_4_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitLF2Wheel";selection="wheel_1_4_damper";};

			class wheel_2_1_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitRFWheel";selection="wheel_2_1_damper";};
			class wheel_2_2_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitRBWheel";selection="wheel_2_2_damper";};
			class wheel_2_3_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitRMWheel";selection="wheel_2_3_damper";};
			class wheel_2_4_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim {source="HitRF2Wheel";selection="wheel_2_4_damper";};

			// Wheels Damage END
			// Wheels END
         
         class Wheel_1_1
			{
				type="rotationX";
				source="wheel";
				selection="wheel_1_1";
				axis="wheel_1_1_axis";
				memory=1;
				sourceAddress="loop";
				minValue=0;
				maxValue=1;
				angle0=0;
				angle1="rad -360";
			};
			class wheel_2_1: Wheel_1_1
			{
				selection="wheel_2_1";
				axis="wheel_2_1_axis";
			};
			class wheel_1_2: Wheel_1_1
			{
				selection="wheel_1_2";
				axis="wheel_1_2_axis";
			};
			class wheel_1_3: Wheel_1_1
			{
				selection="wheel_1_3";
				axis="wheel_1_3_axis";
			};
			class Wheel_2_2: Wheel_1_1
			{
				selection="wheel_2_2";
				axis="wheel_2_2_axis";
			};
			class Wheel_2_3: Wheel_1_1
			{
				selection="wheel_2_3";
				axis="wheel_2_3_axis";
			};
			class Wheel_1_4: Wheel_1_1
			{
				selection="wheel_1_4";
				axis="wheel_1_4_axis";
			};
			class Wheel_2_4: Wheel_1_1
			{
				selection="wheel_2_4";
				axis="wheel_2_4_axis";
			};
		};
	};
//###################################################	Default AMV	 	###################################################
	class APC_Wheeled_01_base_F: Car
	{
		skeletonName="APC_Wheeled_01_base_F_skeleton";
		sectionsInherit="Car";
		sections[]=
		{
			"zasleh2",
			"Light_L","Light_R",
			"camo1","camo2","camo3","camo4","CamoNet","CamoSlat",
			"zbytek","vez","zbran","vezVelitele","zbranVelitele",
			"wheel_1_1_hide","wheel_1_2_hide",
			"wheel_1_3_hide","wheel_1_4_hide",
			"wheel_2_1_hide","wheel_2_2_hide",
			"wheel_2_3_hide","wheel_2_4_hide",
		};
		class Animations:Animations
		{
			// Dampers Destruct START
         #undef DamageOffset
			#define DamageOffset 0.19

			class wheel_1_1_Damage:wheel_1_1_Damage {offset1 = DamageOffset;};
			class wheel_1_2_Damage:wheel_1_2_Damage {offset1 = DamageOffset;};
			class wheel_1_3_Damage:wheel_1_3_Damage {offset1 = DamageOffset;};
			class wheel_1_4_Damage:wheel_1_4_Damage {offset1 = DamageOffset;};

			class wheel_2_1_Damage:wheel_2_1_Damage {offset1 = DamageOffset;};
			class wheel_2_2_Damage:wheel_2_2_Damage {offset1 = DamageOffset;};
			class wheel_2_3_Damage:wheel_2_3_Damage {offset1 = DamageOffset;};
			class wheel_2_4_Damage:wheel_2_4_Damage {offset1 = DamageOffset;};
			// Dampers Destruct END

			// animace damper smerem nahoru START
			class wheel_1_1_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			class wheel_1_2_Damper_Damage_BackAnim:wheel_1_2_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			class wheel_1_3_Damper_Damage_BackAnim:wheel_1_3_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			class wheel_1_4_Damper_Damage_BackAnim:wheel_1_4_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};

			class wheel_2_1_Damper_Damage_BackAnim:wheel_2_1_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			class wheel_2_2_Damper_Damage_BackAnim:wheel_2_2_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			class wheel_2_3_Damper_Damage_BackAnim:wheel_2_3_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			class wheel_2_4_Damper_Damage_BackAnim:wheel_2_4_Damper_Damage_BackAnim {offset1 = -1.2*DamageOffset;};
			// animace damper smerem nahoru END

			// z: rewriting
			class Wheel_1_1_Damper
			{
				type="translation";
				source="damper";
				selection="wheel_1_1_damper_land";
				axis="damper_axis";
				minValue="0";
				maxValue="1";
				offset0= "0.1125";
				offset1= "-0.1125";
				memory=1;
			};
			class wheel_2_1_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_1_damper_land";
			};
			class wheel_1_2_Damper: Wheel_1_1_Damper
			{
				selection="wheel_1_2_damper_land";
			};
			class wheel_1_3_Damper: Wheel_1_1_Damper
			{
				selection="wheel_1_3_damper_land";
			};
			class Wheel_2_2_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_2_damper_land";
			};
			class Wheel_2_3_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_3_damper_land";
			};
			class Wheel_1_4_Damper: Wheel_1_1_Damper
			{
				selection="wheel_1_4_damper_land";
			};
			class Wheel_2_4_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_4_damper_land";
			};

			class Steering_1_1
			{
				type="rotationY";
				source="drivingWheel";
				selection="wheel_1_1_steering";
				axis="wheel_1_1_steering_axis";
				memory=1;
				minValue="rad -90";
				maxValue="rad +90";
				angle0="rad +55";
				angle1="rad -55";
			};
			class Steering_2_1: Steering_1_1
			{
				selection="wheel_2_1_steering";
				axis="wheel_2_1_steering_axis";
			};
			class Steering_1_2: Steering_1_1
			{
				selection="wheel_1_2_steering";
				axis="wheel_1_2_steering_axis";
				angle0="rad +35";
				angle1="rad -35";
			};
			class Steering_2_2: Steering_2_1
			{
				selection="wheel_2_2_steering";
				axis="wheel_2_2_steering_axis";
				angle0="rad +35";
				angle1="rad -35";
			};

			class HatchDriver
			{
				type="rotation";
				source="hatchDriver";
				selection="poklop_driver";
				axis="hatch_driver_axis";
				angle0=0;
				angle1="rad 35";
			};
			// TURRETS
			class MainTurret
			{
				type="rotationY";
				source="mainTurret";
				selection="OtocVez";
				axis="OsaVeze";
				animPeriod=0;
				minValue="rad -360";
				maxValue="rad +360";
				angle0="rad -360";
				angle1="rad +360";
			};
			class TurretBase: MainTurret
			{
				selection = "turret_base";
				angle0 = (rad 360);
				angle1 = (rad -360);
			};
			class MainGun: MainTurret
			{
				type="rotationX";
				source="mainGun";
				selection="OtocHlaven";
				axis="OsaHlavne";
			};
			class ObsTurret: MainTurret
			{
				source="obsTurret";
				selection="Commander_Turret";
				axis="Commander_Turret_axis";
			};
			class ObsGun: MainGun
			{
				source="obsGun";
				selection="Commander_Gun";
				axis="Commander_Gun_axis";
			};
			class damageHlaven: damageHide
			{
				selection="damageHlaven";
			};
			class damageCamonet: damageHide
			{
				selection="vhc_camonet_hull";
			};
			class VrtuleA
			{
				type="rotation";
				source="propeller";
				selection="VrtuleA";
				axis="osavrtuleA";
				animPeriod=0;
				minValue=-1;
				maxValue=1;
				angle0="rad -360";
				angle1="rad +360";
			};
			class VrtuleB: VrtuleA
			{
				selection="VrtuleB";
				axis="osavrtuleB";
			};
			class Optics
			{
				type="rotationX";
				source="camElev";
				selection="Computer";
				axis="OsaHlavne";
				animPeriod=0;
				minValue="rad -360";
				maxValue="rad +360";
				angle0="rad -360";
				angle1="rad +360";
			};
			class poklop_gunner
			{
				type="rotation";
				source="hatchGunner";
				selection="poklop_gunner";
				axis="hatch_commander_axis";
				minValue=0;
				maxValue=1;
				angle0="0";
				angle1="rad +90";
			};
			class poklop_commander: poklop_gunner
			{
				source="hatchCommander";
				selection="poklop_commander";
				axis="hatch_commander_axis";
				angle0="0";
				angle1="rad +150";
			};
			class zasleh_ROT
			{
				selection = "zasleh";
				axis = "usti hlavne";
				type = "rotationZ";
				source = "muzzle_rot";
				sourceAddress = "loop";
				minValue = 0;
				maxValue = 5;
				angle0 = "rad -180";
				angle1 = "rad 180";
			};
			class zasleh2_ROT: zasleh_ROT
			{
				selection = "zasleh2";
				axis = "usti hlavne3";
				source = "time";	// Much better source for medium and high ROF weapons.
				maxValue = 0.24;
				sourceAddress = "mirror";
			};
			class zasleh_HIDE
			{
				type="hide";
				source="muzzle_hide";
				selection="zasleh";
				minValue=0;
				maxValue=1;
				hideValue=0;
				unhideValue = 0.85;
			};
			class reverse_light
			{
				type="Hide";
				selection="reverse_light";
				sourceAddress="clamp";
				source="Gear";
				minValue = -1;
				maxValue = 0;
				hideValue = "0.2";
			};
			class HideTurret {
				type="hide";
				selection="otocvez";
				source="HideTurret";
				minValue = 0;
				maxValue = 1;
				hideValue = 1;
			};

			//TANK DLC
			//Indicators
			class DrivingWheel
			{
				type      = "rotation";
				source    = "drivingWheel";
				selection = "drivewheel";
				axis      = "drivewheel_axis";
				minValue  = -1;
				maxValue  = 1;
				angle0    = (rad 45);
				angle1    = (rad -45);
			};		
			class IndicatorVoltammeter
			{
				type      = "rotation";
				source    = "rpm";
				selection = "voltammeter_indicator";
				axis      = "voltammeter_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 1;
				angle0    = rad -45;
				angle1    = 0;
			};
			class IndicatorVoltammeter2: IndicatorVoltammeter
			{
				selection = "voltammeter2_indicator";
				axis      = "voltammeter2_axis";
			};
			class IndicatorVoltammeter_turret
			{
				type      = "rotation";
				source    = "rpm";
				selection = "voltammeter_indicator_turret";
				axis      = "voltammeter_turret_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 1;
				angle0    = rad -45;
				angle1    = 0;
			};
			class IndicatorVoltammeter2_turret: IndicatorVoltammeter_turret
			{
				selection = "voltammeter2_indicator_turret";
				axis      = "voltammeter2_turret_axis";
			};			
			class IndicatorTempOil
			{
				type      = "rotation";
				source    = "engineTemp";
				selection = "oil_temp_indicator";
				axis      = "oil_temp_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 0.5;
				angle0    = "rad -40";
				angle1    = "rad 18";
			};
			class IndicatorTempWater
			{
				type      = "rotation";
				source    = "engineTemp";
				selection = "water_temp_indicator";
				axis      = "water_temp_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 0.5;
				angle0    = "rad -30";
				angle1    = "rad 12";
			};
			class IndicatorAmmeter
			{
				type      = "rotation";
				source    = "rpm";
				selection = "ammeter_indicator";
				axis      = "ammeter_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 1;
				angle0    = rad -45;
				angle1    = rad 1.5;
			};
			class IndicatorAmmeter_turret
			{
				type      = "rotation";
				source    = "rpm";
				selection = "ammeter_indicator_turret";
				axis      = "ammeter_turret_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 1;
				angle0    = rad -70;
				angle1    = rad 1.5;
			};
			class IndicatorSpeed
			{
				type      = "rotation";
				source    = "speed";
				selection = "speed_indicator";
				axis      = "speed_axis";
				memory    = 1;
				maxValue  = 31.2;
				angle0    = "rad 0";
				angle1    = "rad -330";
			};
			class IndicatorSpeed_MFD_Driver: IndicatorSpeed
			{
				selection = "mfd_driver_speed";
				axis      = "mfd_driver_speed_axis";
				maxValue  = 27.7;
				angle1    = "rad -180";
			};				
			class IndicatorRPM: IndicatorSpeed
			{
				source    = "rpm";
				selection = "rpm";
				axis      = "rpm_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 2300;
				angle0    = "rad -45";
				angle1    = "rad 20";
			};
			class IndicatorRPM_MFD_Driver: IndicatorRPM
			{
				selection = "mfd_driver_rpm";
				axis      = "mfd_driver_rpm_axis";
				angle0    = "rad -5";
				angle1    = "rad -165";
			};											
			//General lights in interiors		
			class lights_driver
			{
				type        ="hide";
				source      ="rpm";
				selection   ="lights_driver";
				minValue    = -0.1;
				maxValue    = 0.9;
				hideValue   = 0;
				unHideValue = 1;
			};
			class lights_driver_off
			{
				type      =	"hide";
				source    =	"rpm";
				selection =	"lights_driver_off";
				minValue  =	-0.1;
				maxValue  = 0.89;
				hideValue = 1;
			};
			class lights_turret
			{
				type        = "hide";
				source      = "rpm";
				selection   = "lights_turret";
				minValue    = -0.1;
				maxValue    = 0.9;
				hideValue   = 0;
				unHideValue = 1;
			};
			class lights_turret_off
			{
				type      =	"hide";
				source    =	"rpm";
				selection =	"lights_turret_off";
				minValue  =	-0.1;
				maxValue  = 0.89;
				hideValue = 1;
			};			
			class cannon_ready_light
			{
				type          = "hide";
				source        = "revolving_cannon";
				selection     = "cannon_load_indicator";
				sourceAddress = "mirror";
				minValue      = -1;
				maxValue      = 0;
				hideValue     = 1;
			};			
			//Damage indicators
			class Engine_damage_indicator
			{
				type        = "hide";
				source      = "HitEngine_src";
				selection   = "damage_engine";		
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 0;
				unHideValue = 1;
			};
			class Main_gun_damage_indicator
			{
				type        = "hide";
				source      = "HitMainGun_src";
				selection   = "damage_gun";		
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 0;
				unHideValue = 1;
			};
			//Only for tracked
			class Left_Track_damage_indicator
			{
				type        = "hide";
				source      = "HitLTrack_src";
				selection   = "damage_ltrack";		
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 0;
				unHideValue = 1;
			};
			class Right_Track_damage_indicator
			{
				type        = "hide";
				source      = "HitRTrack_src";
				selection   = "damage_rtrack";		
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 0;
				unHideValue = 1;
			};
			//Pedal animations, same as Car class
			class pedal_thrust
			{
				type       = rotation;
				source     = Throttle;
				selection  = pedal_thrust;
				axis       = pedal_thrust_axis;
				memory     = 1;
				minValue   = 0;
				maxValue   = 1;
				angle0     = (rad 0);
				angle1     = (rad -20);
				animPeriod = 1;
			};
			class pedal_brake: pedal_thrust
			{
				source    = Brake;
				selection = pedal_brake;
				axis      = pedal_brake_axis;
				maxValue  = 0.5;
				angle0    = (rad 0);
				angle1    = (rad -20);
			};
			//Turret control
			class turret_control_x
			{
				type      = "rotation";
				source    = "turret_control_y";
				selection = "turret_control";
				axis      = "turret_control_x_axis";
				minValue  = -1;
				maxValue  = 1;
				angle0    = "rad -10";
				angle1    = "rad +10";
				memory    =  1;				
			};
			class turret_control_y: turret_control_x
			{
				type      = "rotation";
				source    = "turret_control_x";
				selection = "turret_control";
				axis      = "turret_control_y_axis";
			};
			class com_turret_control_x
			{
				type      = "rotation";
				source    = "com_turret_control_y";
				selection = "com_turret_control";
				axis      = "com_turret_control_x_axis";
				minValue  = -1;
				maxValue  = 1;
				angle0    = "rad -10";
				angle1    = "rad +10";
				memory    =  1;				
			};
			class com_turret_control_y: com_turret_control_x
			{
				type      = "rotation";
				source    = "com_turret_control_x";
				selection = "com_turret_control";
				axis      = "com_turret_control_y_axis";
			};
			//Driver MFD	
			class Driver_reverse_cam
			{
				type          = "Hide";
				selection     = "driver_pip";
				source        = "Gear";
				minValue      = -1;
				maxValue      = 0;
				hideValue     = "0.2";
			};
			class Driver_reverse_cam_nopip: Driver_reverse_cam
			{				
				selection     = "mfd_pip_off_driver";
			};
			class Driver_hide_MFD: Driver_reverse_cam
			{
				selection     = "mfd_driver_hide";
				hideValue     = 0;
				unHideValue   = 1;
			};	
			class IndicatorTempWater_MFD_Driver: IndicatorTempWater
			{
				selection = "mfd_driver_water";
				axis      = "mfd_driver_water_axis";
				maxValue  = 0.5;
				angle0    = "rad 0";
				angle1    = "rad 120";
			};
			class IndicatorFuel_MFD_Driver
			{
				type      = "rotation";
				source    = "fuel";
				selection = "mfd_driver_fuel";
				axis      = "mfd_driver_fuel_axis";
				memory    = 1;
				minValue  = 0;
				maxValue  = 1;
				angle0    = "rad 0";
				angle1    = "rad 180";
			};	
			class Indicator_Hull_direction_MFD_Driver
			{
				type       = "rotation";
				source     = "direction";
				selection  = "mfd_driver_hull_dir";
				axis       = "mfd_driver_hull_dir_axis";
				animPeriod = 0;
				minValue   = "rad -360";
				maxValue   = "rad +360";
				angle0     = "rad +360";
				angle1     = "rad -360";
				memory     = 1;
			};		
			class Indicator_Main_turret_MFD_Driver: Indicator_Hull_direction_MFD_Driver
			{
				source     = "mainTurret";
				selection  = "mfd_driver_main_gun";
			};
			class Indicator_Com_turret_MFD_Driver: Indicator_Main_turret_MFD_Driver
			{
				selection = "mfd_driver_com_gun";
				source    = "obsTurret";
				angle0    = "rad +360";
				angle1    = "rad -360";				
			};
			class Indicator_Com_turret_counter_MFD_Driver: Indicator_Com_turret_MFD_Driver
			{
				source = "mainTurret";
				angle0 = "rad +360";
				angle1 = "rad -360";				
			};
			//COM MFD
			class Indicator_Hull_direction_MFD_Com: Indicator_Hull_direction_MFD_Driver
			{
				selection  = "mfd_com_hull_dir";
				axis       = "mfd_com_hull_dir_axis";
			};
			class Indicator_Main_turret_MFD_Com: Indicator_Hull_direction_MFD_Com
			{
				selection = "mfd_onscreen_gunner_turret";
				axis	  =	"mfd_onscreen_turret_dir_axis";	
				source     = "mainTurret";
			};
			class Indicator_Main_turret_OnScreen_Com: Indicator_Hull_direction_MFD_Com
			{
				source     = "mainTurret";
				selection  = "mfd_com_main_gun";
			};
			class Indicator_Com_turret_MFD_Com: Indicator_Hull_direction_MFD_Com
			{
				selection = "mfd_com_com_gun";
				source    = "obsTurret";
				angle0    = "rad +360";
				angle1    = "rad -360";				
			};
			class Indicator_Com_turret_OnScreen_Com: Indicator_Hull_direction_MFD_Com
			{
				selection = "mfd_onscreen_com_turret";
				axis	  =	"mfd_onscreen_turret_dir_axis";			
				source    = "obsTurret";				
				angle0    = "rad +360";
				angle1    = "rad -360";			
			};
			//GUNNER MFD
			class Indicator_Hull_direction_MFD_Gunner: Indicator_Hull_direction_MFD_Driver
			{
				selection  = "mfd_gun_hull_dir";
				axis       = "mfd_gun_hull_dir_axis";
			};
			class Indicator_Main_turret_MFD_Gunner: Indicator_Hull_direction_MFD_Gunner
			{
				source     = "mainTurret";
				selection  = "mfd_gun_main_gun";
			};
			class Indicator_Com_turret_MFD_Gunner: Indicator_Hull_direction_MFD_Gunner
			{
				selection = "mfd_gun_com_gun";
				source    = "obsTurret";
				angle0    = "rad +360";
				angle1    = "rad -360";				
			};
			class Indicator_Com_Smoke_1
			{
				type        = "hide";
				source      = "Smoke_source";
				selection   = "mfd_com_smk_1";		
				minValue    = 0;
				maxValue    = 0.1;
				hideValue   = 1;
			};
			class Indicator_Com_Smoke_2
			{
				type        = "hide";
				source      = "Smoke_source";
				selection   = "mfd_com_smk_2";		
				minValue    = 0.97;
				maxValue    = 0.99;
				hideValue   = 1;
			};		
			//MFD DAMAGE
			class Indicator_damage_engine
			{
				type        = "hide";
				source      = "HitEngine_src";
				selection   = "mfd_dmg_engine";		
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 0;
				unHideValue = 0.66;
			};
			class Indicator_damage_fuel: Indicator_damage_engine
			{
				source      = "HitFuel_src";
				selection   = "mfd_dmg_fuel";
			};
			class Indicator_damage_wheels: Indicator_damage_engine
			{
				source      = "damageWheels";
				selection   = "mfd_dmg_wheels";
				unHideValue = 0.66;				
			};

			class Indicator_turret_damage_hull: Indicator_damage_engine
			{
				source      = "HitHull_src";
				selection   = "mfd_dmg_tur_hull";
			};
			class Indicator_turret_damage_engine: Indicator_damage_engine
			{
				source      = "HitEngine_src";
				selection   = "mfd_dmg_tur_engine";
			};
			class Indicator_turret_damage_fuel: Indicator_damage_engine
			{
				source      = "HitFuel_src";
				selection   = "mfd_dmg_tur_fuel";
			};
			class Indicator_turret_damage_main_gun: Indicator_damage_engine
			{
				source      = "HitMainGun_src";
				selection   = "mfd_dmg_tur_main_gun";
			};
			class Indicator_turret_damage_wheels: Indicator_damage_engine
			{
				source      = "damageWheels";
				selection   = "mfd_dmg_tur_wheels";
				unHideValue = 0.66;
			};
			class Indicator_turret_damage_turret: Indicator_damage_engine
			{
				source      = "HitTurret_src";
				selection   = "mfd_dmg_tur_turret";
			};
			class Indicator_turret_damage_com_turret: Indicator_damage_engine
			{
				source      = "HitComTurret_src";
				selection   = "mfd_dmg_tur_com_gun";
			};			
			//MFD DAMAGE END												
			//MFD END
				
			//IF PIP DISABLED ANIMS
			class Hide_MFD_and_PIP_screen_driver
			{
				type        = "hide";
				source      = "isPip";
				selection   = "mfd_pip_off_driver";		
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 1;
			};
			class Hide_MFD_and_PIP_screen_gunner: Hide_MFD_and_PIP_screen_driver
			{
				selection   = "mfd_pip_off_gunner";	
			};
			class Hide_MFD_elements
			{
				type        = "hide";
				source      = "isPip";
				selection   = "mfd_com_pip_off";
				minValue    = 0;
				maxValue    = 1;
				hideValue   = 0;
				unHideValue = 1;
			};			
			//IF PIP DISABLED ANIMS END			
			// VhC animations
			class showBags
			{
				type			= hide;
				source			= showBags;
				selection		= "vhc_bags";
				animPeriod		= 0;
				hideValue		= 0;
				unhideValue		= 1;
			};
			class showBags_damage: damageHide
			{
				selection		= "vhc_bags";
			};						
			class showCamonetHull
			{
				type			= hide;
				source			= showCamonetHull;
				selection		= "vhc_camonet_hull";
				animPeriod		= 0;
				hideValue		= 0;
				unhideValue		= 1;
			};
			class showCamonetTurret
			{
				type			= hide;
				source			= showCamonetTurret;
				selection		= "vhc_camonet_turret";
				animPeriod		= 0;
				hideValue		= 0;
				unhideValue		= 1;
			};			
			class showCamonetCannon
			{
				type			= hide;
				source			= showCamonetCannon;
				selection		= "vhc_camonet_cannon";
				animPeriod		= 0;
				hideValue		= 0;
				unhideValue		= 1;
			};
			class showSLATHull
			{
				type			= hide;
				source			= showSLATHull;
				selection		= "cage";
				animPeriod		= 0;
				hideValue		= 0;
				unhideValue		= 1;
			};
			class showSLATTurret
			{
				type			= hide;
				source			= showSLATTurret;
				selection		= "cage_turret";
				animPeriod		= 0;
				hideValue		= 0;
				unhideValue		= 1;
			};								
			SLAT_ARMOR(front,cage_front)
			SLAT_ARMOR(back,cage_back)
			SLAT_ARMOR(left_1,cage_left_1)
			SLAT_ARMOR(left_2,cage_left_2)
			SLAT_ARMOR(left_3,cage_left_3)
			SLAT_ARMOR(right_1,cage_right_1)
			SLAT_ARMOR(right_2,cage_right_2)
			SLAT_ARMOR(right_3,cage_right_3)
			SLAT_ARMOR(top_back,cage_top_back)
			SLAT_ARMOR(top_right,cage_top_right)
			SLAT_ARMOR(top_left,cage_top_left)			
			// VhC animations END
		};
	};
	class APC_Wheeled_01_arty_F: APC_Wheeled_01_base_F {};
};
